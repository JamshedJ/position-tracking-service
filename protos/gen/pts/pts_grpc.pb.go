// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/pts/pts.proto

package pts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PositionTracker_GetNearbyPositions_FullMethodName = "/position.PositionTracker/GetNearbyPositions"
	PositionTracker_UpdatePosition_FullMethodName     = "/position.PositionTracker/UpdatePosition"
)

// PositionTrackerClient is the client API for PositionTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionTrackerClient interface {
	GetNearbyPositions(ctx context.Context, in *NearbyRequest, opts ...grpc.CallOption) (PositionTracker_GetNearbyPositionsClient, error)
	UpdatePosition(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type positionTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionTrackerClient(cc grpc.ClientConnInterface) PositionTrackerClient {
	return &positionTrackerClient{cc}
}

func (c *positionTrackerClient) GetNearbyPositions(ctx context.Context, in *NearbyRequest, opts ...grpc.CallOption) (PositionTracker_GetNearbyPositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PositionTracker_ServiceDesc.Streams[0], PositionTracker_GetNearbyPositions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &positionTrackerGetNearbyPositionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PositionTracker_GetNearbyPositionsClient interface {
	Recv() (*PositionResponse, error)
	grpc.ClientStream
}

type positionTrackerGetNearbyPositionsClient struct {
	grpc.ClientStream
}

func (x *positionTrackerGetNearbyPositionsClient) Recv() (*PositionResponse, error) {
	m := new(PositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *positionTrackerClient) UpdatePosition(ctx context.Context, in *PositionRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, PositionTracker_UpdatePosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionTrackerServer is the server API for PositionTracker service.
// All implementations must embed UnimplementedPositionTrackerServer
// for forward compatibility
type PositionTrackerServer interface {
	GetNearbyPositions(*NearbyRequest, PositionTracker_GetNearbyPositionsServer) error
	UpdatePosition(context.Context, *PositionRequest) (*UpdateResponse, error)
	mustEmbedUnimplementedPositionTrackerServer()
}

// UnimplementedPositionTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedPositionTrackerServer struct {
}

func (UnimplementedPositionTrackerServer) GetNearbyPositions(*NearbyRequest, PositionTracker_GetNearbyPositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNearbyPositions not implemented")
}
func (UnimplementedPositionTrackerServer) UpdatePosition(context.Context, *PositionRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedPositionTrackerServer) mustEmbedUnimplementedPositionTrackerServer() {}

// UnsafePositionTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionTrackerServer will
// result in compilation errors.
type UnsafePositionTrackerServer interface {
	mustEmbedUnimplementedPositionTrackerServer()
}

func RegisterPositionTrackerServer(s grpc.ServiceRegistrar, srv PositionTrackerServer) {
	s.RegisterService(&PositionTracker_ServiceDesc, srv)
}

func _PositionTracker_GetNearbyPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NearbyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PositionTrackerServer).GetNearbyPositions(m, &positionTrackerGetNearbyPositionsServer{stream})
}

type PositionTracker_GetNearbyPositionsServer interface {
	Send(*PositionResponse) error
	grpc.ServerStream
}

type positionTrackerGetNearbyPositionsServer struct {
	grpc.ServerStream
}

func (x *positionTrackerGetNearbyPositionsServer) Send(m *PositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PositionTracker_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionTrackerServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PositionTracker_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionTrackerServer).UpdatePosition(ctx, req.(*PositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PositionTracker_ServiceDesc is the grpc.ServiceDesc for PositionTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "position.PositionTracker",
	HandlerType: (*PositionTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePosition",
			Handler:    _PositionTracker_UpdatePosition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNearbyPositions",
			Handler:       _PositionTracker_GetNearbyPositions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/pts/pts.proto",
}
